{"version":3,"names":["React","useSharedValue","useAnimatedReaction","computeNewIndexWhenDataChanges","handlerOffsetDirection","useCommonVariables","props","vertical","height","width","dataLength","defaultIndex","defaultScrollOffsetValue","loop","size","validLength","defaultHandlerOffsetValue","Math","abs","_handlerOffset","handlerOffset","prevDataLength","useEffect","value","previousLength","currentLength","isLengthChanged","shouldComputed","_ref","direction"],"sources":["useCommonVariables.ts"],"sourcesContent":["import React from \"react\";\nimport type Animated from \"react-native-reanimated\";\nimport { useSharedValue, useAnimatedReaction } from \"react-native-reanimated\";\n\nimport { computeNewIndexWhenDataChanges } from \"./computeNewIndexWhenDataChanges\";\nimport type { TInitializeCarouselProps } from \"./useInitProps\";\n\nimport { handlerOffsetDirection } from \"../utils/handlerOffsetDirection\";\n\ninterface ICommonVariables {\n  size: number\n  validLength: number\n  handlerOffset: Animated.SharedValue<number>\n}\n\nexport function useCommonVariables(\n  props: TInitializeCarouselProps<any>,\n): ICommonVariables {\n  const {\n    vertical,\n    height,\n    width,\n    dataLength,\n    defaultIndex,\n    defaultScrollOffsetValue,\n    loop,\n  } = props;\n  const size = vertical ? height : width;\n  const validLength = dataLength - 1;\n  const defaultHandlerOffsetValue = -Math.abs(defaultIndex * size);\n  const _handlerOffset = useSharedValue<number>(defaultHandlerOffsetValue);\n  const handlerOffset = defaultScrollOffsetValue ?? _handlerOffset;\n  const prevDataLength = useSharedValue(dataLength);\n\n  React.useEffect(() => {\n    handlerOffset.value = defaultHandlerOffsetValue;\n  }, [vertical, handlerOffset, defaultHandlerOffsetValue]);\n\n  useAnimatedReaction(() => {\n    const previousLength = prevDataLength.value;\n    const currentLength = dataLength;\n    const isLengthChanged = previousLength !== currentLength;\n    const shouldComputed = isLengthChanged && loop;\n\n    if (shouldComputed)\n      prevDataLength.value = dataLength;\n\n    return {\n      shouldComputed,\n      previousLength,\n      currentLength,\n    };\n  }, ({ shouldComputed, previousLength, currentLength }) => {\n    if (shouldComputed) {\n      // direction -> 1 | -1\n      const direction = handlerOffsetDirection(handlerOffset);\n\n      handlerOffset.value = computeNewIndexWhenDataChanges({\n        direction,\n        previousLength,\n        currentLength,\n        size,\n        handlerOffset: handlerOffset.value,\n      });\n    }\n  }, [dataLength, loop]);\n\n  return {\n    size,\n    validLength,\n    handlerOffset,\n  };\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,cAAc,EAAEC,mBAAmB,QAAQ,yBAAyB;AAE7E,SAASC,8BAA8B,QAAQ,kCAAkC;AAGjF,SAASC,sBAAsB,QAAQ,iCAAiC;AAQxE,OAAO,SAASC,kBAAkBA,CAChCC,KAAoC,EAClB;EAClB,MAAM;IACJC,QAAQ;IACRC,MAAM;IACNC,KAAK;IACLC,UAAU;IACVC,YAAY;IACZC,wBAAwB;IACxBC;EACF,CAAC,GAAGP,KAAK;EACT,MAAMQ,IAAI,GAAGP,QAAQ,GAAGC,MAAM,GAAGC,KAAK;EACtC,MAAMM,WAAW,GAAGL,UAAU,GAAG,CAAC;EAClC,MAAMM,yBAAyB,GAAG,CAACC,IAAI,CAACC,GAAG,CAACP,YAAY,GAAGG,IAAI,CAAC;EAChE,MAAMK,cAAc,GAAGlB,cAAc,CAASe,yBAAyB,CAAC;EACxE,MAAMI,aAAa,GAAGR,wBAAwB,IAAIO,cAAc;EAChE,MAAME,cAAc,GAAGpB,cAAc,CAACS,UAAU,CAAC;EAEjDV,KAAK,CAACsB,SAAS,CAAC,MAAM;IACpBF,aAAa,CAACG,KAAK,GAAGP,yBAAyB;EACjD,CAAC,EAAE,CAACT,QAAQ,EAAEa,aAAa,EAAEJ,yBAAyB,CAAC,CAAC;EAExDd,mBAAmB,CAAC,MAAM;IACxB,MAAMsB,cAAc,GAAGH,cAAc,CAACE,KAAK;IAC3C,MAAME,aAAa,GAAGf,UAAU;IAChC,MAAMgB,eAAe,GAAGF,cAAc,KAAKC,aAAa;IACxD,MAAME,cAAc,GAAGD,eAAe,IAAIb,IAAI;IAE9C,IAAIc,cAAc,EAChBN,cAAc,CAACE,KAAK,GAAGb,UAAU;IAEnC,OAAO;MACLiB,cAAc;MACdH,cAAc;MACdC;IACF,CAAC;EACH,CAAC,EAAEG,IAAA,IAAuD;IAAA,IAAtD;MAAED,cAAc;MAAEH,cAAc;MAAEC;IAAc,CAAC,GAAAG,IAAA;IACnD,IAAID,cAAc,EAAE;MAClB;MACA,MAAME,SAAS,GAAGzB,sBAAsB,CAACgB,aAAa,CAAC;MAEvDA,aAAa,CAACG,KAAK,GAAGpB,8BAA8B,CAAC;QACnD0B,SAAS;QACTL,cAAc;QACdC,aAAa;QACbX,IAAI;QACJM,aAAa,EAAEA,aAAa,CAACG;MAC/B,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACb,UAAU,EAAEG,IAAI,CAAC,CAAC;EAEtB,OAAO;IACLC,IAAI;IACJC,WAAW;IACXK;EACF,CAAC;AACH"}