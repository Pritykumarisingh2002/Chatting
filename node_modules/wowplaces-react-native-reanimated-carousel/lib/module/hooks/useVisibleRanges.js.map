{"version":3,"names":["useDerivedValue","useVisibleRanges","options","total","viewSize","translation","windowSize","_windowSize","ranges","positiveCount","Math","round","negativeCount","curIndex","value","negativeRange","positiveRange"],"sources":["useVisibleRanges.tsx"],"sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport { useDerivedValue } from \"react-native-reanimated\";\n\nexport type IVisibleRanges = Animated.SharedValue<{\n  negativeRange: number[]\n  positiveRange: number[]\n}>;\n\nexport function useVisibleRanges(options: {\n  total: number\n  viewSize: number\n  windowSize?: number\n  translation: Animated.SharedValue<number>\n}): IVisibleRanges {\n  const {\n    total = 0,\n    viewSize,\n    translation,\n    windowSize: _windowSize = 0,\n  } = options;\n\n  const windowSize = total <= _windowSize ? total : _windowSize;\n\n  const ranges = useDerivedValue(() => {\n    const positiveCount = Math.round(windowSize / 2);\n    const negativeCount = windowSize - positiveCount;\n    let curIndex = Math.round(-translation.value / viewSize);\n    curIndex = curIndex < 0 ? (curIndex % total) + total : curIndex;\n    const negativeRange = [\n      (curIndex - negativeCount + total) % total,\n      (curIndex - 1 + total) % total,\n    ];\n    const positiveRange = [\n      (curIndex + total) % total,\n      (curIndex + positiveCount + total) % total,\n    ];\n    if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n      negativeRange[1] = total - 1;\n      positiveRange[0] = 0;\n    }\n    if (positiveRange[0] > positiveRange[1]) {\n      negativeRange[1] = total - 1;\n      positiveRange[0] = 0;\n    }\n    return { negativeRange, positiveRange };\n  }, [total, windowSize, translation]);\n\n  return ranges;\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,yBAAyB;AAOzD,OAAO,SAASC,gBAAgBA,CAACC,OAKhC,EAAkB;EACjB,MAAM;IACJC,KAAK,GAAG,CAAC;IACTC,QAAQ;IACRC,WAAW;IACXC,UAAU,EAAEC,WAAW,GAAG;EAC5B,CAAC,GAAGL,OAAO;EAEX,MAAMI,UAAU,GAAGH,KAAK,IAAII,WAAW,GAAGJ,KAAK,GAAGI,WAAW;EAE7D,MAAMC,MAAM,GAAGR,eAAe,CAAC,MAAM;IACnC,MAAMS,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,GAAG,CAAC,CAAC;IAChD,MAAMM,aAAa,GAAGN,UAAU,GAAGG,aAAa;IAChD,IAAII,QAAQ,GAAGH,IAAI,CAACC,KAAK,CAAC,CAACN,WAAW,CAACS,KAAK,GAAGV,QAAQ,CAAC;IACxDS,QAAQ,GAAGA,QAAQ,GAAG,CAAC,GAAIA,QAAQ,GAAGV,KAAK,GAAIA,KAAK,GAAGU,QAAQ;IAC/D,MAAME,aAAa,GAAG,CACpB,CAACF,QAAQ,GAAGD,aAAa,GAAGT,KAAK,IAAIA,KAAK,EAC1C,CAACU,QAAQ,GAAG,CAAC,GAAGV,KAAK,IAAIA,KAAK,CAC/B;IACD,MAAMa,aAAa,GAAG,CACpB,CAACH,QAAQ,GAAGV,KAAK,IAAIA,KAAK,EAC1B,CAACU,QAAQ,GAAGJ,aAAa,GAAGN,KAAK,IAAIA,KAAK,CAC3C;IACD,IAAIY,aAAa,CAAC,CAAC,CAAC,GAAGZ,KAAK,IAAIY,aAAa,CAAC,CAAC,CAAC,GAAGA,aAAa,CAAC,CAAC,CAAC,EAAE;MACnEA,aAAa,CAAC,CAAC,CAAC,GAAGZ,KAAK,GAAG,CAAC;MAC5Ba,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC;IACtB;IACA,IAAIA,aAAa,CAAC,CAAC,CAAC,GAAGA,aAAa,CAAC,CAAC,CAAC,EAAE;MACvCD,aAAa,CAAC,CAAC,CAAC,GAAGZ,KAAK,GAAG,CAAC;MAC5Ba,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC;IACtB;IACA,OAAO;MAAED,aAAa;MAAEC;IAAc,CAAC;EACzC,CAAC,EAAE,CAACb,KAAK,EAAEG,UAAU,EAAED,WAAW,CAAC,CAAC;EAEpC,OAAOG,MAAM;AACf"}