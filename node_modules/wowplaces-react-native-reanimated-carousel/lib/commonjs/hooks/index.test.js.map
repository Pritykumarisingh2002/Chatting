{"version":3,"names":["_computeNewIndexWhenDataChanges","require","describe","size","positive","negative","params","currentIndex","_direction","direction","previousLength","currentLength","handlerOffset","it","_callee","_regenerator","default","async","_callee$","_context","prev","next","computeNewIndexWhenDataChanges","expect","toBe","stop","Promise","_callee2","_callee2$","_context2","_callee3","_callee3$","_context3","_callee4","_callee4$","_context4","_callee5","_callee5$","_context5"],"sources":["index.test.ts"],"sourcesContent":["import { computeNewIndexWhenDataChanges } from \"./computeNewIndexWhenDataChanges\";\n\ndescribe(\"should work as expected\", () => {\n  const size = 375;\n  const positive = -1;\n  const negative = 1;\n\n  const params = (params: {\n    direction: \"positive\" | \"negative\"\n    currentIndex: number\n    previousLength: number\n    currentLength: number\n  }) => {\n    const { currentIndex, direction: _direction, previousLength, currentLength } = params;\n    const direction = _direction === \"negative\" ? negative : positive;\n    return {\n      direction,\n      handlerOffset: size * currentIndex * direction,\n      size,\n      previousLength,\n      currentLength,\n    };\n  };\n\n  it(\"The direction is negative, And changing length of data set from 4 to 3, the new index will to be 2.\", async () => {\n    const currentIndex = 1;\n    const handlerOffset = computeNewIndexWhenDataChanges(params({\n      currentIndex,\n      direction: \"negative\",\n      previousLength: 4,\n      currentLength: 3,\n    }));\n\n    expect(handlerOffset / size).toBe(2 * positive);\n  });\n\n  it(\"The direction is negative, Changing length of data set from 4 to 3, the index remains original.\", async () => {\n    const handlerOffset = computeNewIndexWhenDataChanges(params({\n      currentIndex: 2,\n      direction: \"negative\",\n      previousLength: 4,\n      currentLength: 3,\n    }));\n\n    expect(handlerOffset / size).toBe(1 * negative);\n  });\n\n  it(\"The direction is positive, Changing length of data set from 4 to 5, the index remains original.\", async () => {\n    const handlerOffset = computeNewIndexWhenDataChanges(params({\n      currentIndex: 3,\n      direction: \"positive\",\n      previousLength: 4,\n      currentLength: 5,\n    }));\n\n    expect(handlerOffset / size).toBe(3 * positive);\n  });\n\n  it(\"The direction is negative, Changing length of data set from 4 to 5, the index remains original.\", async () => {\n    const handlerOffset = computeNewIndexWhenDataChanges(params({\n      currentIndex: 3,\n      direction: \"negative\",\n      previousLength: 4,\n      currentLength: 5,\n    }));\n\n    expect(handlerOffset / size).toBe(4 * negative);\n  });\n\n  it(\"Changing length of data set from 0 to 3, the index remains original.\", async () => {\n    const handlerOffset = computeNewIndexWhenDataChanges(params({\n      currentIndex: 0,\n      direction: \"positive\",\n      previousLength: 0,\n      currentLength: 3,\n    }));\n\n    expect(handlerOffset / size).toBe(0 * positive);\n  });\n});\n"],"mappings":"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"}