{"version":3,"names":["omitZero","_e","global","Error","_f","a","b","_closure","__initData","_worklet_2585996741034_init_data","__workletHash","__stackDetails","__version","exports","_worklet_1218774587822_init_data","code","location","sourceMap","computeNewIndexWhenDataChanges","params","direction","_handlerOffset","handlerOffset","size","previousLength","currentLength","positionIndex","round","isPositive","Math","abs","parseInt","String","prevOffset","prevIndex","changedLength","changedOffset"],"sources":["computeNewIndexWhenDataChanges.ts"],"sourcesContent":["export function omitZero(a: number, b: number) {\n  \"worklet\";\n  if (a === 0)\n    return 0;\n\n  return b;\n}\n\nexport function computeNewIndexWhenDataChanges(params: {\n  direction: number\n  handlerOffset: number\n  size: number\n  previousLength: number\n  currentLength: number\n}) {\n  \"worklet\";\n  const { direction, handlerOffset: _handlerOffset, size, previousLength, currentLength } = params;\n\n  let handlerOffset = _handlerOffset;\n  let positionIndex;\n  let round;\n\n  const isPositive = direction < 0;\n\n  if (isPositive) {\n    positionIndex = (Math.abs(handlerOffset)) / size;\n    round = parseInt(String(omitZero(previousLength, positionIndex / previousLength)));\n  }\n  else {\n    positionIndex = (Math.abs(handlerOffset) - size) / size;\n    round = parseInt(String(omitZero(previousLength, positionIndex / previousLength))) + 1;\n  }\n\n  const prevOffset = omitZero(previousLength, positionIndex % previousLength);\n  const prevIndex = isPositive ? prevOffset : previousLength - prevOffset - 1;\n  const changedLength = round * (currentLength - previousLength);\n  const changedOffset = changedLength * size;\n  if (prevIndex > currentLength - 1 && currentLength < previousLength) {\n    if (isPositive)\n      handlerOffset = (currentLength - 1) * size * direction;\n\n    else\n      handlerOffset = (currentLength - 1) * size * -1;\n  }\n  else {\n    handlerOffset += changedOffset * direction;\n  }\n\n  return handlerOffset;\n}\n\n"],"mappings":"6qBAAgB,CAAAA,QAAQ,gBAAAC,EAAA,MAAAC,MAAA,CAAAC,KAAA,cAAAC,EAAA,UAAAA,GAACC,CAAS,CAAEC,CAAS,CAAE,CAE7C,GAAID,CAAC,GAAK,CAAC,CACT,MAAO,EAAC,CAEV,MAAO,CAAAC,CAAC,CACV,CAAC,CAAAF,EAAA,CAAAG,QAAA,IAAAH,EAAA,CAAAI,UAAA,CAAAC,gCAAA,CAAAL,EAAA,CAAAM,aAAA,eAAAN,EAAA,CAAAO,cAAA,CAAAV,EAAA,CAAAG,EAAA,CAAAQ,SAAA,gBAAAR,EAAA,KAAAS,OAAA,CAAAb,QAAA,CAAAA,QAAA,KAAAc,gCAAA,EAAAC,IAAA,gxCAAAC,QAAA,sHAAAC,SAAA,+pDAEe,CAAAC,8BAA8B,gBAAAjB,EAAA,MAAAC,MAAA,CAAAC,KAAA,eAAAC,EAAA,UAAAA,GAACe,MAM9C,CAAE,CAED,GAAQ,CAAAC,SAAS,CAAyED,MAAM,CAAxFC,SAAS,CAAiBC,cAAc,CAA0CF,MAAM,CAA7EG,aAAa,CAAkBC,IAAI,CAAoCJ,MAAM,CAA9CI,IAAI,CAAEC,cAAc,CAAoBL,MAAM,CAAxCK,cAAc,CAAEC,aAAa,CAAKN,MAAM,CAAxBM,aAAa,CAErF,GAAI,CAAAH,aAAa,CAAGD,cAAc,CAClC,GAAI,CAAAK,aAAa,CACjB,GAAI,CAAAC,KAAK,CAET,GAAM,CAAAC,UAAU,CAAGR,SAAS,CAAG,CAAC,CAEhC,GAAIQ,UAAU,CAAE,CACdF,aAAa,CAAIG,IAAI,CAACC,GAAG,CAACR,aAAa,CAAC,CAAIC,IAAI,CAChDI,KAAK,CAAGI,QAAQ,CAACC,MAAM,CAAChC,QAAQ,CAACwB,cAAc,CAAEE,aAAa,CAAGF,cAAc,CAAC,CAAC,CAAC,CACpF,CAAC,IACI,CACHE,aAAa,CAAG,CAACG,IAAI,CAACC,GAAG,CAACR,aAAa,CAAC,CAAGC,IAAI,EAAIA,IAAI,CACvDI,KAAK,CAAGI,QAAQ,CAACC,MAAM,CAAChC,QAAQ,CAACwB,cAAc,CAAEE,aAAa,CAAGF,cAAc,CAAC,CAAC,CAAC,CAAG,CAAC,CACxF,CAEA,GAAM,CAAAS,UAAU,CAAGjC,QAAQ,CAACwB,cAAc,CAAEE,aAAa,CAAGF,cAAc,CAAC,CAC3E,GAAM,CAAAU,SAAS,CAAGN,UAAU,CAAGK,UAAU,CAAGT,cAAc,CAAGS,UAAU,CAAG,CAAC,CAC3E,GAAM,CAAAE,aAAa,CAAGR,KAAK,EAAIF,aAAa,CAAGD,cAAc,CAAC,CAC9D,GAAM,CAAAY,aAAa,CAAGD,aAAa,CAAGZ,IAAI,CAC1C,GAAIW,SAAS,CAAGT,aAAa,CAAG,CAAC,EAAIA,aAAa,CAAGD,cAAc,CAAE,CACnE,GAAII,UAAU,CACZN,aAAa,CAAG,CAACG,aAAa,CAAG,CAAC,EAAIF,IAAI,CAAGH,SAAS,CAAC,IAGvD,CAAAE,aAAa,CAAG,CAACG,aAAa,CAAG,CAAC,EAAIF,IAAI,CAAG,CAAC,CAAC,CACnD,CAAC,IACI,CACHD,aAAa,EAAIc,aAAa,CAAGhB,SAAS,CAC5C,CAEA,MAAO,CAAAE,aAAa,CACtB,CAAC,CAAAlB,EAAA,CAAAG,QAAA,EAAAP,QAAA,CAxBoBA,QAAQ,EAAAI,EAAA,CAAAI,UAAA,CAAAM,gCAAA,CAAAV,EAAA,CAAAM,aAAA,eAAAN,EAAA,CAAAO,cAAA,CAAAV,EAAA,CAAAG,EAAA,CAAAQ,SAAA,gBAAAR,EAAA,KAAAS,OAAA,CAAAK,8BAAA,CAAAA,8BAAA"}