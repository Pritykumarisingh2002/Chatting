{"version":3,"names":["_reactNativeReanimated","require","_worklet_1686155145629_init_data","code","location","sourceMap","useVisibleRanges","options","_options$total","total","viewSize","translation","_options$windowSize","windowSize","_windowSize","ranges","useDerivedValue","_e","global","Error","_f","positiveCount","Math","round","negativeCount","curIndex","value","negativeRange","positiveRange","_closure","__initData","__workletHash","__stackDetails","__version"],"sources":["useVisibleRanges.tsx"],"sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport { useDerivedValue } from \"react-native-reanimated\";\n\nexport type IVisibleRanges = Animated.SharedValue<{\n  negativeRange: number[]\n  positiveRange: number[]\n}>;\n\nexport function useVisibleRanges(options: {\n  total: number\n  viewSize: number\n  windowSize?: number\n  translation: Animated.SharedValue<number>\n}): IVisibleRanges {\n  const {\n    total = 0,\n    viewSize,\n    translation,\n    windowSize: _windowSize = 0,\n  } = options;\n\n  const windowSize = total <= _windowSize ? total : _windowSize;\n\n  const ranges = useDerivedValue(() => {\n    const positiveCount = Math.round(windowSize / 2);\n    const negativeCount = windowSize - positiveCount;\n    let curIndex = Math.round(-translation.value / viewSize);\n    curIndex = curIndex < 0 ? (curIndex % total) + total : curIndex;\n    const negativeRange = [\n      (curIndex - negativeCount + total) % total,\n      (curIndex - 1 + total) % total,\n    ];\n    const positiveRange = [\n      (curIndex + total) % total,\n      (curIndex + positiveCount + total) % total,\n    ];\n    if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n      negativeRange[1] = total - 1;\n      positiveRange[0] = 0;\n    }\n    if (positiveRange[0] > positiveRange[1]) {\n      negativeRange[1] = total - 1;\n      positiveRange[0] = 0;\n    }\n    return { negativeRange, positiveRange };\n  }, [total, windowSize, translation]);\n\n  return ranges;\n}\n"],"mappings":"mGACA,IAAAA,sBAAA,CAAAC,OAAA,4BAA0D,IAAAC,gCAAA,EAAAC,IAAA,m4BAAAC,QAAA,yGAAAC,SAAA,k1CAOnD,QAAS,CAAAC,gBAAgBA,CAACC,OAKhC,CAAkB,CACjB,IAAAC,cAAA,CAKID,OAAO,CAJTE,KAAK,CAALA,KAAK,CAAAD,cAAA,UAAG,CAAC,CAAAA,cAAA,CACTE,QAAQ,CAGNH,OAAO,CAHTG,QAAQ,CACRC,WAAW,CAETJ,OAAO,CAFTI,WAAW,CAAAC,mBAAA,CAETL,OAAO,CADTM,UAAU,CAAEC,WAAW,CAAAF,mBAAA,UAAG,CAAC,CAAAA,mBAAA,CAG7B,GAAM,CAAAC,UAAU,CAAGJ,KAAK,EAAIK,WAAW,CAAGL,KAAK,CAAGK,WAAW,CAE7D,GAAM,CAAAC,MAAM,CAAG,GAAAC,sCAAe,iBAAAC,EAAA,MAAAC,MAAA,CAAAC,KAAA,eAAAC,EAAA,UAAAA,GAAA,CAAO,CACnC,GAAM,CAAAC,aAAa,CAAGC,IAAI,CAACC,KAAK,CAACV,UAAU,CAAG,CAAC,CAAC,CAChD,GAAM,CAAAW,aAAa,CAAGX,UAAU,CAAGQ,aAAa,CAChD,GAAI,CAAAI,QAAQ,CAAGH,IAAI,CAACC,KAAK,CAAC,CAACZ,WAAW,CAACe,KAAK,CAAGhB,QAAQ,CAAC,CACxDe,QAAQ,CAAGA,QAAQ,CAAG,CAAC,CAAIA,QAAQ,CAAGhB,KAAK,CAAIA,KAAK,CAAGgB,QAAQ,CAC/D,GAAM,CAAAE,aAAa,CAAG,CACpB,CAACF,QAAQ,CAAGD,aAAa,CAAGf,KAAK,EAAIA,KAAK,CAC1C,CAACgB,QAAQ,CAAG,CAAC,CAAGhB,KAAK,EAAIA,KAAK,CAC/B,CACD,GAAM,CAAAmB,aAAa,CAAG,CACpB,CAACH,QAAQ,CAAGhB,KAAK,EAAIA,KAAK,CAC1B,CAACgB,QAAQ,CAAGJ,aAAa,CAAGZ,KAAK,EAAIA,KAAK,CAC3C,CACD,GAAIkB,aAAa,CAAC,CAAC,CAAC,CAAGlB,KAAK,EAAIkB,aAAa,CAAC,CAAC,CAAC,CAAGA,aAAa,CAAC,CAAC,CAAC,CAAE,CACnEA,aAAa,CAAC,CAAC,CAAC,CAAGlB,KAAK,CAAG,CAAC,CAC5BmB,aAAa,CAAC,CAAC,CAAC,CAAG,CAAC,CACtB,CACA,GAAIA,aAAa,CAAC,CAAC,CAAC,CAAGA,aAAa,CAAC,CAAC,CAAC,CAAE,CACvCD,aAAa,CAAC,CAAC,CAAC,CAAGlB,KAAK,CAAG,CAAC,CAC5BmB,aAAa,CAAC,CAAC,CAAC,CAAG,CAAC,CACtB,CACA,MAAO,CAAED,aAAa,CAAbA,aAAa,CAAEC,aAAa,CAAbA,aAAc,CAAC,CACzC,CAAC,CAAAR,EAAA,CAAAS,QAAA,EAAAhB,UAAA,CA3CqBA,UAAU,CAAAF,WAAA,CACLA,WAAW,CAAAD,QAAA,CAASA,QAAQ,CAAAD,KAAA,CASlCA,KAAK,EAAAW,EAAA,CAAAU,UAAA,CAAA5B,gCAAA,CAAAkB,EAAA,CAAAW,aAAA,eAAAX,EAAA,CAAAY,cAAA,CAAAf,EAAA,CAAAG,EAAA,CAAAa,SAAA,gBAAAb,EAAA,KAiCvB,CAACX,KAAK,CAAEI,UAAU,CAAEF,WAAW,CAAC,CAAC,CAEpC,MAAO,CAAAI,MAAM,CACf"}